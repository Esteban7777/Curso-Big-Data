id=aux$id)
df<-left_join(df,aux2,by="id")
return(df)
}
crear_Oc_jefe<-function(df){
aux<-df %>% filter(jefe==1)
aux2<-data.frame(Oc_jefe=aux$Oc,
id=aux$id)
df<-left_join(df,aux2,by="id")
return(df)
}
crear_Des_jefe<-function(df){
aux<-df %>% filter(jefe==1)
aux2<-data.frame(Des_jefe=aux$Des,
id=aux$id)
df<-left_join(df,aux2,by="id")
return(df)
}
crear_Ina_jefe<-function(df){
aux<-df %>% filter(jefe==1)
aux2<-data.frame(Ina_jefe=aux$Ina,
id=aux$id)
df<-left_join(df,aux2,by="id")
return(df)
}
#En Train
train_personas<-crear_Pet_jefe(train_personas)
train_personas<-crear_Oc_jefe(train_personas)
train_personas<-crear_Des_jefe(train_personas)
train_personas<-crear_Ina_jefe(train_personas)
train_hogares<-traer_variable(train_hogares,train_personas,"Pet_jefe")
train_hogares<-traer_variable(train_hogares,train_personas,"Oc_jefe")
train_hogares<-traer_variable(train_hogares,train_personas,"Des_jefe")
train_hogares<-traer_variable(train_hogares,train_personas,"Ina_jefe")
train_hogares$Pet_jefe[is.na(train_hogares$Pet_jefe)] <- 0
train_hogares$Oc_jefe[is.na(train_hogares$Oc_jefe)] <- 0
train_hogares$Des_jefe[is.na(train_hogares$Des_jefe)] <- 0
train_hogares$Ina_jefe[is.na(train_hogares$Ina_jefe)] <- 0
#En Test
test_personas<-crear_Pet_jefe(test_personas)
test_personas<-crear_Oc_jefe(test_personas)
test_personas<-crear_Des_jefe(test_personas)
test_personas<-crear_Ina_jefe(test_personas)
test_hogares<-traer_variable(test_hogares,test_personas,"Pet_jefe")
test_hogares<-traer_variable(test_hogares,test_personas,"Oc_jefe")
test_hogares<-traer_variable(test_hogares,test_personas,"Des_jefe")
test_hogares<-traer_variable(test_hogares,test_personas,"Ina_jefe")
test_hogares$Pet_jefe[is.na(test_hogares$Pet_jefe)] <- 0
test_hogares$Oc_jefe[is.na(test_hogares$Oc_jefe)] <- 0
test_hogares$Des_jefe[is.na(test_hogares$Des_jefe)] <- 0
test_hogares$Ina_jefe[is.na(test_hogares$Ina_jefe)] <- 0
#Posición laboral del jefe de hogar####
crear_posicion_jefe<-function(df){
aux<-df %>% filter(jefe==1)
aux2<-data.frame(posicion_jefe=aux$P6430,id=aux$id)
df<-left_join(df,aux2,by="id")
return(df)
}
#Creamos la variable en Train
train_personas<-crear_posicion_jefe(train_personas)
train_hogares<-traer_variable(train_hogares,train_personas,"posicion_jefe")
train_hogares$posicion_jefe<-as.factor(train_hogares$posicion_jefe)
#Creamos la variable en Test
test_personas<-crear_posicion_jefe(test_personas)
test_hogares<-traer_variable(test_hogares,test_personas,"posicion_jefe")
test_hogares$posicion_jefe<-as.factor(test_hogares$posicion_jefe)
#Creamos personas por habitación
#En train
train_hogares$Personas_habitacion<-train_hogares$Nper/train_hogares$P5010
#En test
train_test$Personas_habitacion<-test_hogares$Nper/test_hogares$P5010
test_hogares$Personas_habitacion<-test_hogares$Nper/test_hogares$P5010
View(test_hogares)
dependientes_modelo7<-c("educacion_jefe",
"sexo_jefe",
"Personas_habitacion"#Completa
)
table(test_hogares$sexo_jefe)
table(test_hogares$regimen_jefe)
m7<-glm(as.formula(
paste("Pobre~",
paste(dependientes_modelo7, collapse = " * "))),data = train_hogares)
summary(m7)
train_hogares$m7_prob_predict<-predict(m7,newdata = train_hogares)
train_hogares$m7_predict<-ifelse(train_hogares$m7_prob_predict>=0.5,1,0)
matrix_predicciones7<-table(train_hogares$m7_predict,train_hogares$Pobre)
confusionMatrix(matrix_predicciones7)
table(train_hogares$m7_predict)
confusionMatrix(matrix_predicciones7)
library(devtools)
library(caret)
matrix_predicciones7<-table(train_hogares$m7_predict,train_hogares$Pobre)
confusionMatrix(matrix_predicciones7)
test_hogares$m7_prob_predict<-predict(object = m7,newdata = test_hogares)
test_hogares$m7_predict<-ifelse(test_hogares$m7_prob_predict>0.5,1,0)
table(is.na(test_hogares$m7_predict))
sub5<-test_hogares %>% select(id,m7_predict)
sub5<-sub5 %>% rename(pobre=m7_predict)
write_csv(x = sub5,"C:/Users/HP-Laptop/Documents/GitHub/Curso-Big-Data/Taller 2/2.Entregables/Submission5.csv",)
set.seed(123)
#Cargamos la data con las variables construidas para el modelo
library(devtools)
library(caret)
source_url("https://raw.githubusercontent.com/Esteban7777/Curso-Big-Data/main/Taller%202/1.Procesamiento%20y%20sintaxis/Creaci%C3%B3n%20de%20variables%20de%20inter%C3%A9s.R")
#Exploramos las posibles variables dependientes
summary(train_hogares$Ingtotug)
table(is.na(train_hogares$Ingtotug)) #la variable está completa en train
summary(train_hogares$Ingtotugarr)
table(is.na(train_hogares$Ingtotugarr)) #la
dependientes_modelo8<-c("desempleo_jefe", #Completa
"educacion_jefe", #Completa
"sexo_jefe", #Completa
"Clase", #Completa
"P5090", #Completa
"Ina_jefe", #Completa
"Des_jefe", #Completa
"Oc_jefe" ,
"Personas_habitacion"#Completa
)
dependientes_modelo8<-c("desempleo_jefe", #Completa
"educacion_jefe", #Completa
"sexo_jefe", #Completa
"Clase", #Completa
"P5090", #Completa
"Ina_jefe", #Completa
"Des_jefe", #Completa
"Oc_jefe" ,
"Personas_habitacion"#Completa
)
m8<-glm(as.formula(
paste("Pobre~",
paste(dependientes_modelo8, collapse = " * "))),data = train_hogares)
train_hogares$m8_prob_predict<-predict(m8,newdata = train_hogares)
train_hogares$m8_predict<-ifelse(train_hogares$m8_prob_predict>=0.5,1,0)
dependientes_modelo8<-c( #Completa
"educacion_jefe", #Completa
"sexo_jefe", #Completa
"Clase", #Completa
"P5090", #Completa
#Completa
"Des_jefe", #Completa
"Personas_habitacion"#Completa
)
m8<-glm(as.formula(
paste("Pobre~",
paste(dependientes_modelo8, collapse = " * "))),data = train_hogares)
summary(m8)
train_hogares$m8_prob_predict<-predict(m8,newdata = train_hogares)
train_hogares$m8_predict<-ifelse(train_hogares$m8_prob_predict>=0.5,1,0)
matrix_predicciones8<-table(train_hogares$m8_predict,train_hogares$Pobre)
confusionMatrix(matrix_predicciones8)
test_hogares$m8_prob_predict<-predict(object = m8,newdata = test_hogares)
test_hogares$m8_predict<-ifelse(test_hogares$m8_prob_predict>0.5,1,0)
table(is.na(test_hogares$m8_predict))
table(test_hogares$m8_predict)
table(sub1$pobre)
sub6<-test_hogares %>% select(id,m8_predict)
sub6<-sub6 %>% rename(pobre=m8_predict)
write_csv(x = sub6,"C:/Users/HP-Laptop/Documents/GitHub/Curso-Big-Data/Taller 2/2.Entregables/Submission6.csv",)
plot(train_hogares$educacion_jefe,train_hogares$Pobre)
boxplot(train_hogares$educacion_jefe~train_hogares$Pobre)
boxplot((train_hogares$educacion_jefe^2)~train_hogares$Pobre)
boxplot((train_hogares$educacion_jefe^3)~train_hogares$Pobre)
boxplot(log(train_hogares$educacion_jefe)~train_hogares$Pobre)
boxplot(train_hogares$Des_jefe~train_hogares$Pobre)
boxplot(train_hogares$Oc_jefe~train_hogares$Pobre)
boxplot(train_hogares$posicion_jefe~train_hogares$Pobre)
table(train_hogares$posicion_jefe)
table(train_hogares$Pobre)
install.packages("leaps")
library(leaps)
dependientes_modelo<-c("desempleo_jefe", #Completa
"educacion_jefe", #Completa
"sexo_jefe", #Completa
"Clase", #Completa
"Dominio", #Completa
"P5090", #Completa
"Ina_jefe", #Completa
"Des_jefe", #Completa
"Oc_jefe" #Completa
)
formula <- as.formula(paste("y ~", paste(variables, collapse = "+")))
formula <- as.formula(paste("y ~", paste(predictores, collapse = "+")))
predictores<-c("desempleo_jefe", #Completa
"educacion_jefe", #Completa
"sexo_jefe", #Completa
"Clase", #Completa
"Dominio", #Completa
"P5090", #Completa
"Ina_jefe", #Completa
"Des_jefe", #Completa
"Oc_jefe" #Completa
)
formula <- as.formula(paste("y ~", paste(predictores, collapse = "+")))
library(devtools)
library(caret)
source_url("https://raw.githubusercontent.com/Esteban7777/Curso-Big-Data/main/Taller%202/1.Procesamiento%20y%20sintaxis/Creaci%C3%B3n%20de%20variables%20de%20inter%C3%A9s.R")
View(train_hogares)
formula <- as.formula(paste("Ingtotugarr ~", paste(predictores, collapse = "+")))
modelos <- regsubsets(formula, data =train_hogares)
View(modelos)
summary(modelos)
which.min(summary(modelos)$bic)
summary(todos_modelos)$which[which.min(summary(modelos)$bic), ]
summary(modelos)$which[which.min(summary(modelos)$bic), ]
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
# Ajustar el modelo
modelo <- lm(formula_modelo, data = test_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
test_hogares[[nombre_columna]] <- predict(modelo)
}
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
# Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
test_hogares[[nombre_columna]] <- predict(modelo)
}
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+"), "+ 1"))
# Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
test_hogares[[nombre_columna]] <- predict(modelo)
}
Intercept<-c(rep(1, times = nrow(test_hogares))))
Intercept<-c(rep(1, times = nrow(test_hogares)))
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
Intercept<-c(rep(1, times = nrow(test_hogares)))
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+"))
# Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
Intercept<-rep(1, times = nrow(test_hogares))
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
Intercept<-as.data.frame(rep(1, times = nrow(test_hogares)))
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+"))
# Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
Intercept<-as.data.frame(rep(1, times = nrow(test_hogares)))
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
test_hogares[[nombre_columna]] <- predict(modelo)
}
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
Intercept<-as.data.frame(rep(1, times = nrow(test_hogares)))
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
test_hogares[[nombre_columna]] <- predict(modelo)
}
total_models <- length(summary(modelos)$which)
all_predictions <- matrix(NA, nrow = nrow(train_hogares), ncol = total_models)
# Itera sobre cada modelo generado
for (i in 1:total_models) {
# Obtiene las variables predictoras del modelo i
predictors <- names(which(summary(modelos)$which[i, ]))
# Ajusta el modelo con las variables seleccionadas
model <- lm(y ~ ., data = train_hogares[, predictors])
# Realiza predicciones con el modelo y guárdalas en la matriz de predicciones
all_predictions[, i] <- predict(model, newdata = train_hogares)
}
# Itera sobre cada modelo generado
for (i in 1:total_models) {
# Obtiene las variables predictoras del modelo i
predictors <- names(which(summary(modelos)$which[i, ]))
# Ajusta el modelo con las variables seleccionadas
model <- lm(Ingtotugarr ~ ., data = train_hogares[, predictors])
# Realiza predicciones con el modelo y guárdalas en la matriz de predicciones
all_predictions[, i] <- predict(model, newdata = train_hogares)
}
modelos <- regsubsets(formula, data =train_hogares)
names(which(summary(modelos)$which[1, ]))
# Itera sobre cada modelo generado
for (i in 1:total_models) {
# Obtiene las variables predictoras del modelo i
predictors <- names(which(summary(modelos)$which[i, ]))
# Ajusta el modelo con las variables seleccionadas
model <- lm(Ingtotugarr ~ predictors, data = train_hogares)
# Realiza predicciones con el modelo y guárdalas en la matriz de predicciones
all_predictions[, i] <- predict(model, newdata = train_hogares)
}
predictors <- names(which(summary(modelos)$which[i, ]))
predictors <- names(which(summary(modelos)$which[1, ]))
predictors <- names(which(summary(modelos)$which[1, ]))
predictors
predictors <- names(which(summary(modelos)$which[1+1, ]))
predictors
predictors <- names(which(summary(modelos)$which[1,1 ]))
predictors
predictors <- names(which(summary(modelos)$which[1,0 ]))
predictors
predictors <- names(which(summary(modelos)$which[2,]))
predictors
predictors <- names(which(summary(modelos)$which[2,]))[1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))[-1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))[1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))[2:]
predictors <- names(which(summary(modelos)$which[2,]))[2:,]
predictors <- names(which(summary(modelos)$which[2,]))[2,]
predictors <- names(which(summary(modelos)$which[1,]))[2]
predictors <- names(which(summary(modelos)$which[2,]))[2,]
predictors
predictors <- names(which(summary(modelos)$which[1,]))[2,]
predictors <- names(which(summary(modelos)$which[1,]))[1,]
predictors <- names(which(summary(modelos)$which[1,]))[1]
predictors
predictors <- names(which(summary(modelos)$which[1,]))[1+1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))
predictors
predictors <- names(which(summary(modelos)$which[1,]))[2+1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))[2+1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))[-1]
predictors
predictors <- names(which(summary(modelos)$which[1,]))[-1]
predictors
names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
test_hogares[[nombre_columna]] <- predict(modelo)
}
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
train_hogares[[nombre_columna]] <- predict(modelo)
}
predictores<-c("desempleo_jefe", #Completa
"educacion_jefe", #Completa
"sexo_jefe", #Completa
"Clase", #Completa
#"Dominio", #Completa pero no tiene bogotá
"P5090", #Completa
"Ina_jefe", #Completa
"Des_jefe", #Completa
"Oc_jefe" #Completa
)
formula <- as.formula(paste("Ingtotugarr ~", paste(predictores, collapse = "+")))
modelos <- regsubsets(formula, data =train_hogares)
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
train_hogares[[nombre_columna]] <- predict(modelo)
}
predictores<-c("desempleo_jefe", #Completa
"educacion_jefe", #Completa
"sexo_jefe", #Completa
"Clase", #Completa
#"Dominio", #Completa pero no tiene bogotá
"P5090", #Completa
"Ina_jefe", #Completa
"Des_jefe", #Completa
"Oc_jefe" #Completa
)
formula <- as.formula(paste("Ingtotugarr ~", paste(predictores, collapse = "+")))
modelos <- regsubsets(formula, data =train_hogares)
#Predicciones
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
train_hogares[[nombre_columna]] <- predict(modelo)
}
View(train_hogares)
table(train_hogares$sexo_jefe)
train_hogares$sexo_jefe<-iselse(train_hogares$sexo_jefe==1,1,0)
train_hogares$sexo_jefe<-ifelse(train_hogares$sexo_jefe==1,1,0)
table(train_hogares$sexo_jefe)
train_hogares$sexo_jefe<-iselse(train_hogares$sexo_jefe==1,1,0)
table(train_hogares$sexo_jefe)
modelos <- regsubsets(formula, data =train_hogares)
#Predicciones
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
train_hogares[[nombre_columna]] <- predict(modelo)
}
table(is.na(train_hogares$desempleo_jefe))
train_hogares$desempleo_jefe<-replace(train_hogares$desempleo_jefe, is.na(train_hogares$desempleo_jefe),0)
table(is.na(train_hogares$desempleo_jefe))
formula <- as.formula(paste("Ingtotugarr ~", paste(predictores, collapse = "+")))
train_hogares$sexo_jefe<-ifelse(train_hogares$sexo_jefe==1,1,0)
modelos <- regsubsets(formula, data =train_hogares)
#Predicciones
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
train_hogares[[nombre_columna]] <- predict(modelo)
}
length(summary(modelos)$which)
names(summary(modelos)$which[72, summary(modelos)$which[72, ] != 0])[-1]
names(summary(modelos)$which[71, summary(modelos)$which[72, ] != 0])[-1]
names(summary(modelos)$which[71, summary(modelos)$which[70, ] != 0])[-1]
names(summary(modelos)$which[71, summary(modelos)$which[1, ] != 0])[-1]
names(summary(modelos)$which[71, summary(modelos)$which[71, ] != 0])[-1]
names(summary(modelos)$which[1, summary(modelos)$which[1, ] != 0])[-1]
names(summary(modelos)$which[2, summary(modelos)$which[2, ] != 0])[-1]
names(summary(modelos)$which[5, summary(modelos)$which[5, ] != 0])[-1]
names(summary(modelos)$which[10, summary(modelos)$which[10, ] != 0])[-1]
names(summary(modelos)$which[9, summary(modelos)$which[9, ] != 0])[-1]
names(summary(modelos)$which[8, summary(modelos)$which[8, ] != 0])[-1]
todas_combinaciones <- list()
for (i in 1:length(predictores)) {
todas_combinaciones[[i]] <- combn(predictores, i)
}
View(todas_combinaciones)
formula <- as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones, collapse = "+")))
modelos <- regsubsets(formula, data =train_hogares)
paste(todas_combinaciones, collapse = "+")
length(todas_combinaciones)
View(modelos)
todas_combinaciones[1]
for (i in length(todas_combinaciones)){
formulas<-as.formula(paste(("Ingtotugarr ~", paste(todas_combinaciones[i], collapse = "+")))))
for (i in length(todas_combinaciones)){
formulas<-as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones[i], collapse = "+"))))
for (i in length(todas_combinaciones)){
formulas<-as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones[i], collapse = "+")))
}
modelos <- regsubsets(formulas, data =train_hogares)
formula <- as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones[1], collapse = "+")))
modelos <- regsubsets(formula, data =train_hogares)
todas_combinaciones[1]
as.data.frame(todas_combinaciones)
as.array(todas_combinaciones)
prueba<-as.array(todas_combinaciones)
formula <- as.formula(paste("Ingtotugarr ~", paste(prueba[1], collapse = "+")))
todas_combinaciones<-as.array(todas_combinaciones)
for (i in length(todas_combinaciones)){
formulas<-as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones[i], collapse = "+")))
}
modelos <- regsubsets(formulas, data =train_hogares)
for (i in length(todas_combinaciones)){
formulas<-as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones[i], collapse = "+")))
}
modelos <- regsubsets(formulas, data =train_hogares)
length(todas_combinaciones)
length(formulas)
length(formulas)
length(formulas)
