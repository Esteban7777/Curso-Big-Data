source_url("https://raw.githubusercontent.com/Esteban7777/Curso-Big-Data/main/Taller%202/1.Procesamiento%20y%20sintaxis/Creaci%C3%B3n%20de%20variables%20de%20inter%C3%A9s.R")
#Probando sobre muestreo para random forest
predictores<-c("informalidad_jefe",
#"subsidio_jefe",
"edad_jefe",
#"posicion_jefe",
"Ina_jefe","Des_jefe","Oc_jefe","Pet_jefe","ocupacion_jefe",
"educacion_jefe",
#"regimen_jefe",
"sexo_jefe","Clase",#"Dominio",
"P5000",
#"P5010",
"P5090",
#"P5100","P5130","P5140",
"Nper","Npersug",#"Depto",
#"regimen_subsidiado_jefe",
"desempleo_jefe","Personas_habitacion","tipo_casa","edad_jefe_joven",
"Personas_habitacion_round")
#Hay que convertir a numerico las variables
str(train_hogares$informalidad_jefe)
str(train_hogares$sexo_jefe)
str(train_hogares$Clase)
str(train_hogares$P5090)
str(train_hogares$Nper)
str(train_hogares$Npersug)
str(train_hogares$tipo_casa)
str(train_hogares$edad_jefe_joven)
str(train_hogares$Personas_habitacion_round)
#str(train_hogares$Pobre)
#Las variables de arriba son las que vienen como factor, se convirtieron una a una en número
train_hogares$Personas_habitacion_round<-as.numeric(train_hogares$Personas_habitacion_round)
View(train_hogares)
#str(train_hogares$Pobre)
#Las variables de arriba son las que vienen como factor, se convirtieron una a una en número
train_hogares$Personas_habitacion_r<-as.numeric(train_hogares$Personas_habitacion_r)
# Eliminar NAs solo de las variables especificadas por predictores
train_hogares <- train_hogares[complete.cases(train_hogares[predictores]), ]
str(train_hogares$Personas_habitacion_r)
#Hay que convertir a numerico las variables
str(train_hogares$informalidad_jefe)
set.seed(1234)
library(devtools)
library(randomForest)
library(caret)
library(smotefamily)
source_url("https://raw.githubusercontent.com/Esteban7777/Curso-Big-Data/main/Taller%202/1.Procesamiento%20y%20sintaxis/Creaci%C3%B3n%20de%20variables%20de%20inter%C3%A9s.R")
set.seed(1234)
library(devtools)
library(randomForest)
library(caret)
library(smotefamily)
library(ada)
source_url("https://raw.githubusercontent.com/Esteban7777/Curso-Big-Data/main/Taller%202/1.Procesamiento%20y%20sintaxis/Creaci%C3%B3n%20de%20variables%20de%20inter%C3%A9s.R")
#Probando sobre muestreo para random forest
predictores<-c("informalidad_jefe",
#"subsidio_jefe",
"edad_jefe",
#"posicion_jefe",
"Ina_jefe","Des_jefe","Oc_jefe","Pet_jefe","ocupacion_jefe",
"educacion_jefe",
#"regimen_jefe",
"sexo_jefe","Clase",#"Dominio",
"P5000",
#"P5010",
"P5090",
#"P5100","P5130","P5140",
"Nper","Npersug",#"Depto",
#"regimen_subsidiado_jefe",
"desempleo_jefe","Personas_habitacion","tipo_casa","edad_jefe_joven",
"Personas_habitacion_round")
#Hay que convertir a numerico las variables
str(train_hogares$informalidad_jefe)
str(train_hogares$sexo_jefe)
str(train_hogares$Clase)
str(train_hogares$P5090)
str(train_hogares$Nper)
str(train_hogares$Npersug)
str(train_hogares$tipo_casa)
str(train_hogares$edad_jefe_joven)
str(train_hogares$Personas_habitacion_r)
#str(train_hogares$Pobre)
#Las variables de arriba son las que vienen como factor, se convirtieron una a una en número
train_hogares$Personas_habitacion_r<-as.numeric(train_hogares$Personas_habitacion_r)
#Hay que convertir a numerico las variables
str(train_hogares$informalidad_jefe)
str(train_hogares$sexo_jefe)
str(train_hogares$Clase)
str(train_hogares$P5090)
str(train_hogares$Nper)
str(train_hogares$Npersug)
str(train_hogares$tipo_casa)
str(train_hogares$edad_jefe_joven)
str(train_hogares$Pobre)
#Las variables de arriba son las que vienen como factor, se convirtieron una a una en número
train_hogares$Personas_habitacion_r<-as.numeric(train_hogares$Personas_habitacion_r)
ctrl <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
verbose = FALSE,
savePredictions = TRUE)
smote_output <- SMOTE(X = train_hogares[predictores],
target = train_hogares$Pobre)
str(train_hogares$predictores)
# Convertir la variable Pobre a formato numérico
train_hogares$Pobre <- as.numeric(train_hogares$Pobre)
ctrl <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
verbose = FALSE,
savePredictions = TRUE)
smote_output <- SMOTE(X = train_hogares[predictores],
target = train_hogares$Pobre)
# Convertir la variable Pobre a formato numérico
train_hogares$Pobre <- as.numeric(train_hogares$Pobre)
#Probando sobre muestreo para random forest
predictores<-c("informalidad_jefe",
#"subsidio_jefe",
"edad_jefe",
#"posicion_jefe",
"Ina_jefe","Des_jefe","Oc_jefe","Pet_jefe","ocupacion_jefe",
"educacion_jefe",
#"regimen_jefe",
"sexo_jefe","Clase",#"Dominio",
"P5000",
#"P5010",
"P5090",
#"P5100","P5130","P5140",
"Nper","Npersug",#"Depto",
#"regimen_subsidiado_jefe",
"desempleo_jefe","Personas_habitacion","tipo_casa","edad_jefe_joven",
"Personas_habitacion_round")
#Hay que convertir a numerico las variables
str(train_hogares$informalidad_jefe)
str(train_hogares$sexo_jefe)
str(train_hogares$Clase)
str(train_hogares$P5090)
str(train_hogares$Nper)
str(train_hogares$Npersug)
str(train_hogares$tipo_casa)
str(train_hogares$edad_jefe_joven)
str(train_hogares$Personas_habitacion_r)
str(train_hogares$Pobre)
#Las variables de arriba son las que vienen como factor, se convirtieron una a una en número
train_hogares$Personas_habitacion_r<-as.numeric(train_hogares$Personas_habitacion_r)
# Convertir la variable Pobre a formato numérico
train_hogares$Pobre <- as.numeric(train_hogares$Pobre)
ctrl <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
verbose = FALSE,
savePredictions = TRUE)
smote_output <- SMOTE(X = train_hogares[predictores],
target = train_hogares$Pobre)
View(train_hogares)
#Hay que convertir a numerico las variables
str(train_hogares$informalidad_jefe)
str(train_hogares$sexo_jefe)
str(train_hogares$Clase)
str(train_hogares$P5090)
str(train_hogares$Nper)
str(train_hogares$Npersug)
str(train_hogares$tipo_casa)
str(train_hogares$edad_jefe_joven)
str(train_hogares$Personas_habitacion_r)
str(train_hogares$informalidad_jefe)
train_hogares$informalidad_jefe<-as.numeric(train_hogares$informalidad_jefe)
str(train_hogares$sexo_jefe)
train_hogares$sexo_jefe<-as.numeric(train_hogares$sexo_jefe)
str(train_hogares$Clase)
train_hogares$Clase<-as.numeric(train_hogares$Clase)
str(train_hogares$P5090)
train_hogares$P5090<-as.numeric(train_hogares$P5090)
str(train_hogares$Nper)
train_hogares$Nper<-as.numeric(train_hogares$Nper)
str(train_hogares$Npersug)
train_hogares$Npersug<-as.numeric(train_hogares$Npersug)
str(train_hogares$tipo_casa)
train_hogares$tipo_casa<-as.numeric(train_hogares$tipo_casa)
str(train_hogares$edad_jefe_joven)
train_hogares$edad_jefe_joven<-as.numeric(train_hogares$edad_jefe_joven)
str(train_hogares$Personas_habitacion_r)
train_hogares$Personas_habitacion_r<-as.numeric(train_hogares$Personas_habitacion_r)
str(train_hogares$Pobre)
train_hogares$Pobre <- as.numeric(train_hogares$Pobre)
ctrl <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
verbose = FALSE,
savePredictions = TRUE)
smote_output <- SMOTE(X = train_hogares[predictores],
target = train_hogares$Pobre)
View(train_hogares)
view(predictores)
# Convertir todas las variables en predictores a formato numérico
for (col in predictores) {
train_hogares[[col]] <- as.numeric(train_hogares[[col]])
}
ctrl <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
verbose = FALSE,
savePredictions = TRUE)
smote_output <- SMOTE(X = train_hogares[predictores],
target = train_hogares$Pobre)
# Especifica la ruta donde deseas guardar el archivo CSV
ruta_descarga <- "C:/Users/windows/Downloads/Descarga/predictores.csv"
# Guarda los datos en un archivo CSV
write.csv(predictores, file = ruta_descarga, row.names = FALSE)
# Guarda los datos en un archivo CSV
write.csv(train_hogares, file = ruta_descarga, row.names = FALSE)
# Especifica la ruta donde deseas guardar el archivo CSV
ruta_descarga <- "C:/Users/windows/Downloads/Descarga/train_hogares.csv"
# Guarda los datos en un archivo CSV
write.csv(train_hogares, file = ruta_descarga, row.names = FALSE)
NUEVO <- train_hogares[predictores]
View(NUEVO)
NUEVO <- train_hogares[predictores]
# Especifica la ruta donde deseas guardar el archivo CSV
ruta_descarga <- "C:/Users/windows/Downloads/Descarga/NUEVO.csv"
# Guarda los datos en un archivo CSV
write.csv(train_hogares, file = ruta_descarga, row.names = FALSE)
View(train_hogares)
smote_output <- SMOTE(X = train_hogares[predictores],
target = train_hogares$Pobre)
view(train_hogares[predictores])
=======
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+"), "+ 1"))
# Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
test_hogares[[nombre_columna]] <- predict(modelo)
}
Intercept<-c(rep(1, times = nrow(test_hogares))))
Intercept<-c(rep(1, times = nrow(test_hogares)))
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
Intercept<-c(rep(1, times = nrow(test_hogares)))
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+"))
# Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
Intercept<-rep(1, times = nrow(test_hogares))
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
Intercept<-as.data.frame(rep(1, times = nrow(test_hogares)))
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+"))
# Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
Intercept<-as.data.frame(rep(1, times = nrow(test_hogares)))
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
test_hogares[[nombre_columna]] <- predict(modelo)
}
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
Intercept<-as.data.frame(rep(1, times = nrow(test_hogares)))
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
test_hogares[[nombre_columna]] <- predict(modelo)
}
total_models <- length(summary(modelos)$which)
all_predictions <- matrix(NA, nrow = nrow(train_hogares), ncol = total_models)
# Itera sobre cada modelo generado
for (i in 1:total_models) {
# Obtiene las variables predictoras del modelo i
predictors <- names(which(summary(modelos)$which[i, ]))
# Ajusta el modelo con las variables seleccionadas
model <- lm(y ~ ., data = train_hogares[, predictors])
# Realiza predicciones con el modelo y guárdalas en la matriz de predicciones
all_predictions[, i] <- predict(model, newdata = train_hogares)
}
# Itera sobre cada modelo generado
for (i in 1:total_models) {
# Obtiene las variables predictoras del modelo i
predictors <- names(which(summary(modelos)$which[i, ]))
# Ajusta el modelo con las variables seleccionadas
model <- lm(Ingtotugarr ~ ., data = train_hogares[, predictors])
# Realiza predicciones con el modelo y guárdalas en la matriz de predicciones
all_predictions[, i] <- predict(model, newdata = train_hogares)
}
modelos <- regsubsets(formula, data =train_hogares)
names(which(summary(modelos)$which[1, ]))
# Itera sobre cada modelo generado
for (i in 1:total_models) {
# Obtiene las variables predictoras del modelo i
predictors <- names(which(summary(modelos)$which[i, ]))
# Ajusta el modelo con las variables seleccionadas
model <- lm(Ingtotugarr ~ predictors, data = train_hogares)
# Realiza predicciones con el modelo y guárdalas en la matriz de predicciones
all_predictions[, i] <- predict(model, newdata = train_hogares)
}
predictors <- names(which(summary(modelos)$which[i, ]))
predictors <- names(which(summary(modelos)$which[1, ]))
predictors <- names(which(summary(modelos)$which[1, ]))
predictors
predictors <- names(which(summary(modelos)$which[1+1, ]))
predictors
predictors <- names(which(summary(modelos)$which[1,1 ]))
predictors
predictors <- names(which(summary(modelos)$which[1,0 ]))
predictors
predictors <- names(which(summary(modelos)$which[2,]))
predictors
predictors <- names(which(summary(modelos)$which[2,]))[1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))[-1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))[1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))[2:]
predictors <- names(which(summary(modelos)$which[2,]))[2:,]
predictors <- names(which(summary(modelos)$which[2,]))[2,]
predictors <- names(which(summary(modelos)$which[1,]))[2]
predictors <- names(which(summary(modelos)$which[2,]))[2,]
predictors
predictors <- names(which(summary(modelos)$which[1,]))[2,]
predictors <- names(which(summary(modelos)$which[1,]))[1,]
predictors <- names(which(summary(modelos)$which[1,]))[1]
predictors
predictors <- names(which(summary(modelos)$which[1,]))[1+1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))
predictors
predictors <- names(which(summary(modelos)$which[1,]))[2+1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))[2+1]
predictors
predictors <- names(which(summary(modelos)$which[2,]))[-1]
predictors
predictors <- names(which(summary(modelos)$which[1,]))[-1]
predictors
names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])
names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
test_hogares[[nombre_columna]] <- predict(modelo)
}
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
train_hogares[[nombre_columna]] <- predict(modelo)
}
predictores<-c("desempleo_jefe", #Completa
"educacion_jefe", #Completa
"sexo_jefe", #Completa
"Clase", #Completa
#"Dominio", #Completa pero no tiene bogotá
"P5090", #Completa
"Ina_jefe", #Completa
"Des_jefe", #Completa
"Oc_jefe" #Completa
)
formula <- as.formula(paste("Ingtotugarr ~", paste(predictores, collapse = "+")))
modelos <- regsubsets(formula, data =train_hogares)
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
train_hogares[[nombre_columna]] <- predict(modelo)
}
predictores<-c("desempleo_jefe", #Completa
"educacion_jefe", #Completa
"sexo_jefe", #Completa
"Clase", #Completa
#"Dominio", #Completa pero no tiene bogotá
"P5090", #Completa
"Ina_jefe", #Completa
"Des_jefe", #Completa
"Oc_jefe" #Completa
)
formula <- as.formula(paste("Ingtotugarr ~", paste(predictores, collapse = "+")))
modelos <- regsubsets(formula, data =train_hogares)
#Predicciones
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
train_hogares[[nombre_columna]] <- predict(modelo)
}
View(train_hogares)
table(train_hogares$sexo_jefe)
train_hogares$sexo_jefe<-iselse(train_hogares$sexo_jefe==1,1,0)
train_hogares$sexo_jefe<-ifelse(train_hogares$sexo_jefe==1,1,0)
table(train_hogares$sexo_jefe)
train_hogares$sexo_jefe<-iselse(train_hogares$sexo_jefe==1,1,0)
table(train_hogares$sexo_jefe)
modelos <- regsubsets(formula, data =train_hogares)
#Predicciones
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
train_hogares[[nombre_columna]] <- predict(modelo)
}
table(is.na(train_hogares$desempleo_jefe))
train_hogares$desempleo_jefe<-replace(train_hogares$desempleo_jefe, is.na(train_hogares$desempleo_jefe),0)
table(is.na(train_hogares$desempleo_jefe))
formula <- as.formula(paste("Ingtotugarr ~", paste(predictores, collapse = "+")))
train_hogares$sexo_jefe<-ifelse(train_hogares$sexo_jefe==1,1,0)
modelos <- regsubsets(formula, data =train_hogares)
#Predicciones
for (i in 1:length(summary(modelos)$which)) {
# Obtener las variables incluidas en el modelo
variables_modelo <- names(summary(modelos)$which[i, summary(modelos)$which[i, ] != 0])[-1]
# Convertir las variables a una fórmula
formula_modelo <- as.formula(paste("Ingtotugarr ~", paste(variables_modelo, collapse = "+")))
#Ajustar el modelo
modelo <- lm(formula_modelo, data = train_hogares)
# Crear una columna con los valores predichos por este modelo
nombre_columna <- paste("Ingtotugarr_predic_", i, sep = "")
train_hogares[[nombre_columna]] <- predict(modelo)
}
length(summary(modelos)$which)
names(summary(modelos)$which[72, summary(modelos)$which[72, ] != 0])[-1]
names(summary(modelos)$which[71, summary(modelos)$which[72, ] != 0])[-1]
names(summary(modelos)$which[71, summary(modelos)$which[70, ] != 0])[-1]
names(summary(modelos)$which[71, summary(modelos)$which[1, ] != 0])[-1]
names(summary(modelos)$which[71, summary(modelos)$which[71, ] != 0])[-1]
names(summary(modelos)$which[1, summary(modelos)$which[1, ] != 0])[-1]
names(summary(modelos)$which[2, summary(modelos)$which[2, ] != 0])[-1]
names(summary(modelos)$which[5, summary(modelos)$which[5, ] != 0])[-1]
names(summary(modelos)$which[10, summary(modelos)$which[10, ] != 0])[-1]
names(summary(modelos)$which[9, summary(modelos)$which[9, ] != 0])[-1]
names(summary(modelos)$which[8, summary(modelos)$which[8, ] != 0])[-1]
todas_combinaciones <- list()
for (i in 1:length(predictores)) {
todas_combinaciones[[i]] <- combn(predictores, i)
}
View(todas_combinaciones)
formula <- as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones, collapse = "+")))
modelos <- regsubsets(formula, data =train_hogares)
paste(todas_combinaciones, collapse = "+")
length(todas_combinaciones)
View(modelos)
todas_combinaciones[1]
for (i in length(todas_combinaciones)){
formulas<-as.formula(paste(("Ingtotugarr ~", paste(todas_combinaciones[i], collapse = "+")))))
for (i in length(todas_combinaciones)){
formulas<-as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones[i], collapse = "+"))))
for (i in length(todas_combinaciones)){
formulas<-as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones[i], collapse = "+")))
}
modelos <- regsubsets(formulas, data =train_hogares)
formula <- as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones[1], collapse = "+")))
modelos <- regsubsets(formula, data =train_hogares)
todas_combinaciones[1]
as.data.frame(todas_combinaciones)
as.array(todas_combinaciones)
prueba<-as.array(todas_combinaciones)
formula <- as.formula(paste("Ingtotugarr ~", paste(prueba[1], collapse = "+")))
todas_combinaciones<-as.array(todas_combinaciones)
for (i in length(todas_combinaciones)){
formulas<-as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones[i], collapse = "+")))
}
modelos <- regsubsets(formulas, data =train_hogares)
for (i in length(todas_combinaciones)){
formulas<-as.formula(paste("Ingtotugarr ~", paste(todas_combinaciones[i], collapse = "+")))
}
modelos <- regsubsets(formulas, data =train_hogares)
length(todas_combinaciones)
length(formulas)
length(formulas)
length(formulas)
>>>>>>> parent of a7b5435 (Ajustes al Modelo)
